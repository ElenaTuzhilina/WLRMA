c(list(1,2,3), list(1,2,3))
tic()
result2 = list()
cv.folds = sort(unique(cv.split))
for(k in cv.folds){
X.train = X[cv.split != k,]
Y.train = Y[cv.split != k,]
X.test = X.tr$mat[cv.split == k,]
Y.test = Y.tr$mat[cv.split == k,]
result = RCCA::GRCCA(X.train, Y.train, group1, group2, lambda1, lambda2, mu1, mu2)
x.vars.test = X.test %*% result$x.coefs
y.vars.test = Y.test %*% result$y.coefs
rho.test = diag(cor(x.vars.test,  y.vars.test))
names(rho.test) = names(result$cors)
result2[[paste0('fold', k)]] = c(result, 'x.vars.test' = x.vars.test, 'y.vars.test' = y.vars.test, 'cors.test' = rho.test)
}
toc()
tic()
result2 = list()
cv.folds = sort(unique(cv.split))
for(k in cv.folds){
X.train = X[cv.split != k,]
Y.train = Y[cv.split != k,]
X.test = X.[cv.split == k,]
Y.test = Y[cv.split == k,]
result = RCCA::GRCCA(X.train, Y.train, group1, group2, lambda1, lambda2, mu1, mu2)
x.vars.test = X.test %*% result$x.coefs
y.vars.test = Y.test %*% result$y.coefs
rho.test = diag(cor(x.vars.test,  y.vars.test))
names(rho.test) = names(result$cors)
result2[[paste0('fold', k)]] = c(result, 'x.vars.test' = x.vars.test, 'y.vars.test' = y.vars.test, 'cors.test' = rho.test)
}
toc()
tic()
result2 = list()
cv.folds = sort(unique(cv.split))
for(k in cv.folds){
X.train = X[cv.split != k,]
Y.train = Y[cv.split != k,]
X.test = X[cv.split == k,]
Y.test = Y[cv.split == k,]
result = RCCA::GRCCA(X.train, Y.train, group1, group2, lambda1, lambda2, mu1, mu2)
x.vars.test = X.test %*% result$x.coefs
y.vars.test = Y.test %*% result$y.coefs
rho.test = diag(cor(x.vars.test,  y.vars.test))
names(rho.test) = names(result$cors)
result2[[paste0('fold', k)]] = c(result, 'x.vars.test' = x.vars.test, 'y.vars.test' = y.vars.test, 'cors.test' = rho.test)
}
toc()
result1$fold1$cors.test
result2$fold1$cors.test
rho.test
tic()
result2 = list()
cv.folds = sort(unique(cv.split))
for(k in cv.folds){
X.train = X[cv.split != k,]
Y.train = Y[cv.split != k,]
X.test = X[cv.split == k,]
Y.test = Y[cv.split == k,]
result = RCCA::GRCCA(X.train, Y.train, group1, group2, lambda1, lambda2, mu1, mu2)
x.vars.test = X.test %*% result$x.coefs
y.vars.test = Y.test %*% result$y.coefs
rho.test = diag(cor(x.vars.test,  y.vars.test))
names(rho.test) = names(result$cors)
result2[[paste0('fold', k)]] = c(result, list('x.vars.test' = x.vars.test, 'y.vars.test' = y.vars.test, 'cors.test' = rho.test))
}
toc()
result1$fold1$cors.test
result2$fold1$cors.test
########### test ###########
n = 600
p = 20000
q = 50
K.X = 200
K.Y = 5
X = matrix(rnorm(n*p), n, p)
Y = matrix(rnorm(n*q), n, q)
group1 = sample(1:K.X, p, replace = TRUE)
group2 = sample(1:K.Y, q, replace = TRUE)
lambda1 = 1
lambda2 = 1
mu1 = 1
mu2 = 1
cv.split = sample(1:5, n, replace = TRUE)
library(tictoc)
tic()
result1 = GRCCA(X, Y, group1, group2, lambda1, lambda2, mu1, mu2, cv.split)
toc()
tic()
result2 = list()
cv.folds = sort(unique(cv.split))
for(k in cv.folds){
X.train = X[cv.split != k,]
Y.train = Y[cv.split != k,]
X.test = X[cv.split == k,]
Y.test = Y[cv.split == k,]
result = RCCA::GRCCA(X.train, Y.train, group1, group2, lambda1, lambda2, mu1, mu2)
x.vars.test = X.test %*% result$x.coefs
y.vars.test = Y.test %*% result$y.coefs
rho.test = diag(cor(x.vars.test,  y.vars.test))
names(rho.test) = names(result$cors)
result2[[paste0('fold', k)]] = c(result, list('x.vars.test' = x.vars.test, 'y.vars.test' = y.vars.test, 'cors.test' = rho.test))
}
toc()
result1$fold1$cors.test
result2$fold1$cors.test
73/26
RCCA.tr = function(X, lambda){
p = ncol(X)
n = nrow(X)
if(lambda < 0){
cat('please make', deparse(substitute(lambda)),'>= 0\n')
return()
}
#kernel trick
V = NULL
if(p > n){
if(lambda == 0){
cat('singularity issue. please impose a penalty on', deparse(substitute(X)), 'side\n')
return()
}
SVD = svd(X)
X = SVD$u %*% diag(SVD$d)
V = SVD$v
}
return(list('mat' = X, 'tr' = V))
}
RCCA.inv.tr = function(X, alpha, V){
n.comp = ncol(alpha)
#find canonical variates
u = X %*% alpha
colnames(u) = paste('can.comp', 1:n.comp, sep = '')
#inverse transfrom canonical coefficients
if(!is.null(V)) alpha = V %*% alpha
colnames(alpha) = paste('can.comp', 1:n.comp, sep = '')
return(list('coefs' = alpha, 'vars' = u))
}
RCCA = function(X, Y, lambda1 = 0, lambda2 = 0, cv.split = NULL){
X = as.matrix(X)
Y = as.matrix(Y)
#transform
X.tr = RCCA.tr(X, lambda1)
Y.tr = RCCA.tr(Y, lambda2)
if(is.null(X.tr) | is.null(Y.tr)) return(invisible(NULL))
if(is.null(cv.split)){
cv.split = rep(1, nrow(X))
}
if(length(cv.split) != nrow(X)){
cat("error: length of cv.split should match the number of observations")
return()
}
cv.folds = sort(unique(cv.split))
result = list()
for(k in cv.folds){
#solve optimization problem
X.train = X.tr$mat[cv.split != k,]
Y.train = Y.tr$mat[cv.split != k,]
n.comp = min(ncol(X.train), ncol(Y.train), nrow(X.train))
Cxx = var(X.train, use = "pairwise")
diag(Cxx) = diag(Cxx) + lambda1
Cyy = var(Y.train, use = "pairwise")
diag(Cyy) = diag(Cyy) + lambda2
Cxy = cov(X.train, Y.train, use = "pairwise")
sol = fda::geigen(Cxy, Cxx, Cyy)
names(sol) = c("rho", "alpha", "beta")
#modified canonical correlation
rho.mod = sol$rho[1:n.comp]
names(rho.mod) = paste('can.comp', 1:n.comp, sep = '')
#inverse transform
X.inv.tr = RCCA.inv.tr(X.train, sol$alpha, X.tr$tr)
x.coefs = as.matrix(X.inv.tr$coefs[,1:n.comp])
rownames(x.coefs) = colnames(X)
x.vars = X.inv.tr$vars[,1:n.comp]
rownames(x.vars) = rownames(X.train)
Y.inv.tr = RCCA.inv.tr(Y.train, sol$beta, Y.tr$tr)
y.coefs = as.matrix(Y.inv.tr$coefs[,1:n.comp])
rownames(y.coefs) = colnames(Y)
y.vars = Y.inv.tr$vars[,1:n.comp]
rownames(y.vars) = rownames(Y.train)
#canonical correlation
rho = diag(cor(X.inv.tr$vars,  Y.inv.tr$vars))[1:n.comp]
names(rho) = paste('can.comp', 1:n.comp, sep = '')
result[[paste0("fold", k)]] = list('n.comp' = n.comp, 'cors' = rho, 'mod.cors' = rho.mod,
'x.coefs' = x.coefs, 'x.vars' = x.vars, 'y.coefs' = y.coefs, 'y.vars' = y.vars)
}
return(result)
}
GRCCA.tr = function(X, group, lambda, mu){
if(is.null(group)){
lambda = 0
mu = 0
}
if(lambda < 0){
cat('please make', deparse(substitute(lambda)),'> 0\n')
return(NULL)
}
if(mu <= 0){
cat('please make', deparse(substitute(mu)),'> 0\n')
return(NULL)
}
if(lambda > 0){
#extend matrix
group.names = unique(sort(group))
ps = table(group)
agg = aggregate(t(X), by = list(group), FUN = mean)
X.mean = t(agg[, -1])
colnames(X.mean) = agg[, 1]
X1 = 1/sqrt(lambda) * (X - X.mean[,group])
X2 = scale(X.mean[,group.names], center = FALSE, scale = sqrt(mu/ps[group.names]))
X = cbind(X1, X2)
}
return(list('mat' = X))
}
GRCCA.inv.tr = function(alpha, group, lambda, mu){
if(is.null(group)){
lambda = 0
mu = 0
}
if(lambda > 0){
p = length(group)
group.names = unique(sort(group))
ps = table(group)
alpha1 = alpha[1:p, , drop = FALSE]
alpha2 = alpha[-(1:p), ,drop = FALSE]
agg = aggregate(alpha1, by = list(group), FUN = mean)
alpha1.mean = agg[, -1]
rownames(alpha1.mean) = agg[, 1]
alpha1 = 1/sqrt(lambda) * (alpha1 - alpha1.mean[group,])
if(mu == 0) mu = 1
alpha2 = t(scale(t(alpha2[group.names, , drop = FALSE]), center = FALSE, scale = sqrt(mu*ps[group.names])))
alpha = alpha1 + alpha2[group,]
}
return(list('coefs' = alpha))
}
GRCCA = function(X, Y, group1 = rep(1, ncol(X)), group2 = rep(1, ncol(Y)), lambda1 = 0, lambda2 = 0, mu1 = 0, mu2 = 0, cv.split = NULL){
X = as.matrix(X)
Y = as.matrix(Y)
#transform
X.tr = GRCCA.tr(X, group1, lambda1, mu1)
Y.tr = GRCCA.tr(Y, group2, lambda2, mu2)
if(is.null(X.tr) | is.null(Y.tr)) return(invisible(NULL))
if(is.null(cv.split)){
cv.split = rep(1, nrow(X))
}
if(length(cv.split) != nrow(X)){
cat("error: length of cv.split should match the number of observations")
return()
}
cv.folds = sort(unique(cv.split))
result = list()
#solve optimization problem
solution = RCCA(X.tr$mat, Y.tr$mat, 1, 1, cv.split)
for(k in cv.folds){
X.test = X[cv.split == k,]
Y.test = Y[cv.split == k,]
sol = solution[[paste0("fold", k)]]
n.comp = min(ncol(X), ncol(Y), sum(cv.split == k))
mod.cors = sol$mod.cors[1:n.comp]
#inverse transform
X.inv.tr = GRCCA.inv.tr(sol$x.coefs, group1, lambda1, mu1)
x.coefs = as.matrix(X.inv.tr$coefs[,1:n.comp])
rownames(x.coefs) = colnames(X)
x.vars = sol$x.vars[,1:n.comp]
rownames(x.vars) = rownames(X)
Y.inv.tr = GRCCA.inv.tr(sol$y.coefs, group2, lambda2, mu2)
y.coefs = as.matrix(Y.inv.tr$coefs[,1:n.comp])
rownames(y.coefs) = colnames(Y)
y.vars = sol$y.vars[,1:n.comp]
rownames(y.vars) = rownames(Y)
rho = diag(cor(x.vars,  y.vars))[1:n.comp]
names(rho) = paste('can.comp', 1:n.comp, sep = '')
x.vars.test = X.test %*% x.coefs
y.vars.test = Y.test %*% y.coefs
rho.test = diag(cor(x.vars.test,  y.vars.test))
names(rho.test) = paste('can.comp', 1:n.comp, sep = '')
result[[paste0("fold", k)]] = list('n.comp' = n.comp, 'cors' = rho, 'mod.cors' = rho.mod,
'x.coefs' = x.coefs, 'x.vars' = x.vars, 'y.coefs' = y.coefs, 'y.vars' = y.vars,
'x.vars.test' = x.vars.test, 'y.vars.test' = y.vars.test, 'cors.test' = rho.test)
}
return(result)
}
########### test ###########
n = 600
p = 20000
q = 50
K.X = 200
K.Y = 5
X = matrix(rnorm(n*p), n, p)
Y = matrix(rnorm(n*q), n, q)
group1 = sample(1:K.X, p, replace = TRUE)
group2 = sample(1:K.Y, q, replace = TRUE)
lambda1 = 1
lambda2 = 1
mu1 = 1
mu2 = 1
cv.split = sample(1:5, n, replace = TRUE)
library(tictoc)
tic()
result1 = GRCCA(X, Y, group1, group2, lambda1, lambda2, mu1, mu2, cv.split)
toc()
RCCA.tr = function(X, lambda){
p = ncol(X)
n = nrow(X)
if(lambda < 0){
cat('please make', deparse(substitute(lambda)),'>= 0\n')
return()
}
#kernel trick
V = NULL
if(p > n){
if(lambda == 0){
cat('singularity issue. please impose a penalty on', deparse(substitute(X)), 'side\n')
return()
}
SVD = svd(X)
X = SVD$u %*% diag(SVD$d)
V = SVD$v
}
return(list('mat' = X, 'tr' = V))
}
RCCA.inv.tr = function(X, alpha, V){
n.comp = ncol(alpha)
#find canonical variates
u = X %*% alpha
colnames(u) = paste('can.comp', 1:n.comp, sep = '')
#inverse transfrom canonical coefficients
if(!is.null(V)) alpha = V %*% alpha
colnames(alpha) = paste('can.comp', 1:n.comp, sep = '')
return(list('coefs' = alpha, 'vars' = u))
}
RCCA = function(X, Y, lambda1 = 0, lambda2 = 0, cv.split = NULL){
X = as.matrix(X)
Y = as.matrix(Y)
#transform
X.tr = RCCA.tr(X, lambda1)
Y.tr = RCCA.tr(Y, lambda2)
if(is.null(X.tr) | is.null(Y.tr)) return(invisible(NULL))
if(is.null(cv.split)){
cv.split = rep(1, nrow(X))
}
if(length(cv.split) != nrow(X)){
cat("error: length of cv.split should match the number of observations")
return()
}
cv.folds = sort(unique(cv.split))
result = list()
for(k in cv.folds){
#solve optimization problem
X.train = X.tr$mat[cv.split != k,]
Y.train = Y.tr$mat[cv.split != k,]
n.comp = min(ncol(X.train), ncol(Y.train), nrow(X.train))
Cxx = var(X.train, use = "pairwise")
diag(Cxx) = diag(Cxx) + lambda1
Cyy = var(Y.train, use = "pairwise")
diag(Cyy) = diag(Cyy) + lambda2
Cxy = cov(X.train, Y.train, use = "pairwise")
sol = fda::geigen(Cxy, Cxx, Cyy)
names(sol) = c("rho", "alpha", "beta")
#modified canonical correlation
rho.mod = sol$rho[1:n.comp]
names(rho.mod) = paste('can.comp', 1:n.comp, sep = '')
#inverse transform
X.inv.tr = RCCA.inv.tr(X.train, sol$alpha, X.tr$tr)
x.coefs = as.matrix(X.inv.tr$coefs[,1:n.comp])
rownames(x.coefs) = colnames(X)
x.vars = X.inv.tr$vars[,1:n.comp]
rownames(x.vars) = rownames(X.train)
Y.inv.tr = RCCA.inv.tr(Y.train, sol$beta, Y.tr$tr)
y.coefs = as.matrix(Y.inv.tr$coefs[,1:n.comp])
rownames(y.coefs) = colnames(Y)
y.vars = Y.inv.tr$vars[,1:n.comp]
rownames(y.vars) = rownames(Y.train)
#canonical correlation
rho = diag(cor(X.inv.tr$vars,  Y.inv.tr$vars))[1:n.comp]
names(rho) = paste('can.comp', 1:n.comp, sep = '')
result[[paste0("fold", k)]] = list('n.comp' = n.comp, 'cors' = rho, 'mod.cors' = rho.mod,
'x.coefs' = x.coefs, 'x.vars' = x.vars, 'y.coefs' = y.coefs, 'y.vars' = y.vars)
}
return(result)
}
GRCCA.tr = function(X, group, lambda, mu){
if(is.null(group)){
lambda = 0
mu = 0
}
if(lambda < 0){
cat('please make', deparse(substitute(lambda)),'> 0\n')
return(NULL)
}
if(mu <= 0){
cat('please make', deparse(substitute(mu)),'> 0\n')
return(NULL)
}
if(lambda > 0){
#extend matrix
group.names = unique(sort(group))
ps = table(group)
agg = aggregate(t(X), by = list(group), FUN = mean)
X.mean = t(agg[, -1])
colnames(X.mean) = agg[, 1]
X1 = 1/sqrt(lambda) * (X - X.mean[,group])
X2 = scale(X.mean[,group.names], center = FALSE, scale = sqrt(mu/ps[group.names]))
X = cbind(X1, X2)
}
return(list('mat' = X))
}
GRCCA.inv.tr = function(alpha, group, lambda, mu){
if(is.null(group)){
lambda = 0
mu = 0
}
if(lambda > 0){
p = length(group)
group.names = unique(sort(group))
ps = table(group)
alpha1 = alpha[1:p, , drop = FALSE]
alpha2 = alpha[-(1:p), ,drop = FALSE]
agg = aggregate(alpha1, by = list(group), FUN = mean)
alpha1.mean = agg[, -1]
rownames(alpha1.mean) = agg[, 1]
alpha1 = 1/sqrt(lambda) * (alpha1 - alpha1.mean[group,])
if(mu == 0) mu = 1
alpha2 = t(scale(t(alpha2[group.names, , drop = FALSE]), center = FALSE, scale = sqrt(mu*ps[group.names])))
alpha = alpha1 + alpha2[group,]
}
return(list('coefs' = alpha))
}
GRCCA = function(X, Y, group1 = rep(1, ncol(X)), group2 = rep(1, ncol(Y)), lambda1 = 0, lambda2 = 0, mu1 = 0, mu2 = 0, cv.split = NULL){
X = as.matrix(X)
Y = as.matrix(Y)
#transform
X.tr = GRCCA.tr(X, group1, lambda1, mu1)
Y.tr = GRCCA.tr(Y, group2, lambda2, mu2)
if(is.null(X.tr) | is.null(Y.tr)) return(invisible(NULL))
if(is.null(cv.split)){
cv.split = rep(1, nrow(X))
}
if(length(cv.split) != nrow(X)){
cat("error: length of cv.split should match the number of observations")
return()
}
cv.folds = sort(unique(cv.split))
result = list()
#solve optimization problem
solution = RCCA(X.tr$mat, Y.tr$mat, 1, 1, cv.split)
for(k in cv.folds){
X.test = X[cv.split == k,]
Y.test = Y[cv.split == k,]
sol = solution[[paste0("fold", k)]]
n.comp = min(ncol(X), ncol(Y), sum(cv.split == k))
rho.mod = sol$mod.cors[1:n.comp]
#inverse transform
X.inv.tr = GRCCA.inv.tr(sol$x.coefs, group1, lambda1, mu1)
x.coefs = as.matrix(X.inv.tr$coefs[,1:n.comp])
rownames(x.coefs) = colnames(X)
x.vars = sol$x.vars[,1:n.comp]
rownames(x.vars) = rownames(X)
Y.inv.tr = GRCCA.inv.tr(sol$y.coefs, group2, lambda2, mu2)
y.coefs = as.matrix(Y.inv.tr$coefs[,1:n.comp])
rownames(y.coefs) = colnames(Y)
y.vars = sol$y.vars[,1:n.comp]
rownames(y.vars) = rownames(Y)
rho = diag(cor(x.vars,  y.vars))[1:n.comp]
names(rho) = paste('can.comp', 1:n.comp, sep = '')
x.vars.test = X.test %*% x.coefs
y.vars.test = Y.test %*% y.coefs
rho.test = diag(cor(x.vars.test,  y.vars.test))
names(rho.test) = paste('can.comp', 1:n.comp, sep = '')
result[[paste0("fold", k)]] = list('n.comp' = n.comp, 'cors' = rho, 'mod.cors' = rho.mod,
'x.coefs' = x.coefs, 'x.vars' = x.vars, 'y.coefs' = y.coefs, 'y.vars' = y.vars,
'x.vars.test' = x.vars.test, 'y.vars.test' = y.vars.test, 'cors.test' = rho.test)
}
return(result)
}
########### test ###########
n = 600
p = 20000
q = 50
K.X = 200
K.Y = 5
X = matrix(rnorm(n*p), n, p)
Y = matrix(rnorm(n*q), n, q)
group1 = sample(1:K.X, p, replace = TRUE)
group2 = sample(1:K.Y, q, replace = TRUE)
lambda1 = 1
lambda2 = 1
mu1 = 1
mu2 = 1
cv.split = sample(1:5, n, replace = TRUE)
library(tictoc)
tic()
result1 = GRCCA(X, Y, group1, group2, lambda1, lambda2, mu1, mu2, cv.split)
toc()
tic()
result2 = list()
cv.folds = sort(unique(cv.split))
for(k in cv.folds){
X.train = X[cv.split != k,]
Y.train = Y[cv.split != k,]
X.test = X[cv.split == k,]
Y.test = Y[cv.split == k,]
result = RCCA::GRCCA(X.train, Y.train, group1, group2, lambda1, lambda2, mu1, mu2)
x.vars.test = X.test %*% result$x.coefs
y.vars.test = Y.test %*% result$y.coefs
rho.test = diag(cor(x.vars.test,  y.vars.test))
names(rho.test) = names(result$cors)
result2[[paste0('fold', k)]] = c(result, list('x.vars.test' = x.vars.test, 'y.vars.test' = y.vars.test, 'cors.test' = rho.test))
}
toc()
result1$fold1$mod.cors
result2$fold1$mod.cors
