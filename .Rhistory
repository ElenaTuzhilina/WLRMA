devtools::document()
devtools::document()
setwd('..')
devtools::install('RCCA')
data(X)
data(Y)
#run RCCA
rcca = RCCA(X, Y, lambda1 = 1, lambda2 = 0)
#check the modified canonical correlations
rcca$mod.cors
#check the canonical correlations
rcca$cors
#compare them to cor(x*alpha, y*beta)
diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)
)
setwd('RCCA')
devtools::document()
setwd('..')
devtools::install('RCCA')
??RCCA
?RCCA
data(X)
data(Y)
rcca = RCCA(X, Y, lambda1 = 1, lambda2 = 0)
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation')
points(1:rcca$n.comp, rcca$cors, col = 'red')
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'red')
points(1:rcca$ncomp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'green')
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'green')
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'darkgreen', pch = 12)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'darkgreen', pch = 16)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'yellow', pch = 16, size = 1)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'yellow', pch = 16, size = 0.1)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'yellow', pch = 16, cex = 0.1)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'yellow', pch = 16, cex = 1)
#' #check the modified canonical correlations
#' plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
#' #check the canonical correlations
#' points(1:rcca$n.comp, rcca$cors, col = 'red')
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'red')
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'red')
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'darkgreen', pch = 16, cex = 1)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'red', pch = 16, cex = 0.5)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'red', pch = 16, cex = 0.5)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'red', pch = 16, cex = 0.5)
rcca = RCCA(X, Y, lambda1 = 1, lambda2 = 0)
rcca = RCCA(X, Y, lambda1 = 10, lambda2 = 0)
rcca$cors
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 0)
rcca$cors
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 0)
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 10)
rcca$cors
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 100)
rcca$cors
rcca = RCCA(X, Y, lambda1 = 1000, lambda2 = 100)
rcca$cors
rcca = RCCA(X, Y, lambda1 = 1000)
rcca$cors
rcca = RCCA(X, Y, lambda1 = 1000, lambda2 = 1000)
rcca$cors
rcca = RCCA(X, Y, lambda1 = 1000, lambda2 = 1000)
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'red')
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 100)
rcca$cors
rcca$mod.cors
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 0)
rcca$mod.cors
rcca = RCCA(X, Y, lambda1 = 1000, lambda2 = 0)
rcca$mod.cors
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 0)
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'red')
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'darkgreen', pch = 16, cex = 0.5)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'darkgreen', pch = 16, cex = 0.5)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'darkgreen', pch = 16, cex = 0.7)
points(1:rcca$n.comp, rcca$cors, col = 'orange')
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'magenta', pch = 16, cex = 0.7)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'mint', pch = 16, cex = 0.7)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'aquamarine', pch = 16, cex = 0.7)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
dark
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'darkcyan', pch = 16, cex = 0.7)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
points(1:rcca$n.comp, rcca$cors, col = 'darkorange')
orange
points(1:rcca$n.comp, rcca$cors, col = 'orange')
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 1)
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'darkorange')
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 10)
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'darkorange')
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
rcca = RCCA(X, Y, lambda1 = 1000, lambda2 = 1)
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
rcca = RCCA(X, Y, lambda1 = 1000, lambda2 = 0)
#check the modified canonical correlations
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 1)
#check the modified canonical correlations
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
#check the canonical correlations
points(1:rcca$n.comp, rcca$cors, col = 'darkorange')
#compare them to cor(x*alpha, y*beta)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
set.seed(1)
n = 50
p = 200
q = 5
n.groups = 5
s.X = 1
s.Y = 0.0
s.XY = 0.25
n.seed = 100
lambda1s = 10^seq(-5, 5)
groups = rep(1:n.groups, rep(p/n.groups, n.groups))
nums = factor(rep(1:(p/n.groups), n.groups))
Sigma = matrix(s.XY, q + n.groups, q + n.groups)
Sigma[1:q, 1:q] = s.Y
Sigma[-(1:q), -(1:q)] = s.Y
diag(Sigma) = 1
mu = rep(0, q + n.groups)
generate = function(seed){
set.seed(seed)
centers = mvrnorm(n, mu, Sigma, tol = 1e-12)
Y = centers[,1:q]
Y = scale(Y, center = TRUE, scale = TRUE)
X.group = centers[,-(1:q)]
X = X.group[, groups]
X = X + matrix(rnorm(n * p, 0, s.X), n, p)
X = scale(X, scale = TRUE)
return(list(X = X, Y = Y))
}
generat(0)
generate(0)
library(fra)
library(fda)
generate = function(seed){
set.seed(seed)
centers = mvrnorm(n, mu, Sigma, tol = 1e-12)
Y = centers[,1:q]
Y = scale(Y, center = TRUE, scale = TRUE)
X.group = centers[,-(1:q)]
X = X.group[, groups]
X = X + matrix(rnorm(n * p, 0, s.X), n, p)
X = scale(X, scale = TRUE)
return(list(X = X, Y = Y))
}
generate(0)
library(MASS)
generate(0)
s.XY = 0.2
n.seed = 100
lambda1s = 10^seq(-5, 5)
groups = rep(1:n.groups, rep(p/n.groups, n.groups))
nums = factor(rep(1:(p/n.groups), n.groups))
Sigma = matrix(s.XY, q + n.groups, q + n.groups)
Sigma[1:q, 1:q] = s.Y
Sigma[-(1:q), -(1:q)] = s.Y
diag(Sigma) = 1
mu = rep(0, q + n.groups)
generate(0)
X = generate(0)$X
Y = generate(0)$Y
save(X, file = 'X.rda')
save(Y, file = 'Y.rda')
setwd('RCCA')
document()
devtools::document()
setwd('..')
devtools::install('RCCA')
??RCCA
?RCCA
devtools::install('RCCA')
?RCCA
??RCCA
?RCCA
setwd('RCCA')
devtools:document()
devtools:document()
devtools::document()
setwd('..')
devtools::install('RCCA')
?RCCA
?RCCA
?RCCA
devtools:install('RCCA')
devtools::install('RCCA')
??RCCA
?RCCA
?RCCA:RCCA
?RCCA::RCCA
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 1)
library(RCCA)
data(X)
data(Y)
dim(X)
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 1)
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'darkorange')
#compare them to cor(x*alpha, y*beta)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
rcca = RCCA(X, Y, lambda1 = 100, lambda2 = 0)
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'darkorange')
#compare them to cor(x*alpha, y*beta)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
rcca = RCCA(X, Y, lambda1 = 10, lambda2 = 0)
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'darkorange')
#compare them to cor(x*alpha, y*beta)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
barplot(rcc$x.coefs)
barplot(rcca$x.coefs)
barplot(rcca$x.coefs['can.comp1'])
barplot(rcca$x.coefs['can.comp1', ])
barplot(rcca$x.coefs[,'can.comp1'])
barplot(rcca$x.coefs[,'can.comp2'])
barplot(rcca$x.coefs[,'can.comp1'], color = 'yellow')
barplot(rcca$x.coefs[,'can.comp1'], col = 'yellow')
barplot(rcca$x.coefs[,'can.comp1'], col = 'magenta')
barplot(rcca$x.coefs[,'can.comp1'], col = 'orange')
points(1:rcca$n.comp, rcca$cors, col = 'pink')
plot(1:rcca$n.comp, rcca$mod.cors, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'pink')
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
plot(1:rcca$n.comp, rcca$mod.cors, pch = 16, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
points(1:rcca$n.comp, rcca$cors, col = 'pink')
points(1:rcca$n.comp, rcca$cors, pch = 16, col = 'pink')
points(1:rcca$n.comp, rcca$cors, pch = 16, col = 'magenta')
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.6)
points(1:rcca$n.comp, rcca$cors, pch = 16, col = 'magenta')
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.6)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
points(1:rcca$n.comp, rcca$cors, pch = 16, col = 'purple')
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
#compare them to cor(x*alpha, y*beta)
points(1:rcca$n.comp, rcca$cors, pch = 16, col = 'purple')
#check the canonical coefficients for the first canonical variates
barplot(rcca$x.coefs[,'can.comp1'], col = 'orange')
barplot(rcca$y.coefs[,'can.comp1'], col = 'darkgreen')
barplot(rcca$x.coefs[,'can.comp1'], col = 'orange', 'xlab' = 'feature', ylab = 'value')
barplot(rcca$x.coefs[,'can.comp1'], col = 'orange', 'xlab' = 'X feature', ylab = 'value')
barplot(rcca$y.coefs[,'can.comp1'], col = 'darkgreen', 'xlab' = 'Y feature', ylab = 'value')
remove.packages('RCCA')
setwd('RCCA')
devtools::document()
setwd('..')
devtools::install('RCCA')
?RCCA
?RCCA
?RCCA
?seq
?seq(1, 100, length.out = 5)
seq(1, 100, length.out = 5)
1:ncol(X)
1:200
1:200:50
seq(1, 200, 50)
seq(1, 200, 200/5)
1:200%(200/4)
1:200
sample(1:200, 190)
sort(sample(1:200, 190))
?RCCA::PRCCA
PRCCA = function(X, Y, index1 = 1:ncol(X), index2 = 1:ncol(Y), lambda1 = 0, lambda2 = 0){
X = as.matrix(X)
Y = as.matrix(Y)
n = nrow(X)
p = ncol(X)
q = ncol(Y)
n.comp = min(p,q)
#Apply transformation to X
penalty.X = rep(0, ncol(X))
if(lambda1 > 0){
X1 = X[, index1, drop=FALSE]
X2 = X[, -index1, drop=FALSE]
n1.X = length(index1)
permute.X = order(c(index1, (1:p)[-index1]))
if(ncol(X2) > n){
cat('PRCCA is not possible!')
return(NULL)
}
B.X = NULL
if(ncol(X2) > 0){
#regress X2 from X1
B.X = solve(t(X2) %*% X2) %*% t(X2) %*% X1
X1 = X1 - X2 %*% B.X
}
V.X = NULL
if(ncol(X1) > n){
#apply kernel trick
SVD = svd(X1)
X1 = SVD$u %*% diag(SVD$d)
V.X = SVD$v
n1.X = ncol(V.X)
}
X = cbind(X1, X2)
penalty.X = rep(0, ncol(X))
penalty.X[1:ncol(X1)] = lambda1
}
#Apply transformation to Y
penalty.Y = rep(0, ncol(Y))
if(lambda2 > 0){
Y1 = Y[, index2, drop=FALSE]
Y2 = Y[, -index2, drop=FALSE]
n1.Y = length(index2)
permute.Y = order(c(index2, (1:q)[-index2]))
if(ncol(Y2) > n){
cat('PRCCA is not possible!')
return(NULL)
}
B.Y = NULL
if(ncol(Y2) > 0){
#regress Y2 from Y1
B.Y = solve(t(Y2) %*% Y2) %*% t(Y2) %*% Y1
Y1 = Y1 - Y2 %*% B.Y
}
V.Y = NULL
if(ncol(Y1) > n){
#apply kernel trick
SVD = svd(Y1)
Y1 = SVD$u %*% diag(SVD$d)
V.Y = SVD$v
n1.Y = ncol(V.Y)
}
Y = cbind(Y1, Y2)
penalty.Y = rep(0, ncol(Y))
penalty.Y[1:ncol(Y1)] = lambda2
}
#compute canonical variates
Cxx = var(X, use = "pairwise") + diag(penalty.X)
Cyy = var(Y, use = "pairwise") + diag(penalty.Y)
Cxy = cov(X, Y, use = "pairwise")
solution = geigen(Cxy, Cxx, Cyy)
names(solution) = c("rho", "alpha", "beta")
#find modified correlation
rho.mod = solution$cor
names(rho.mod) = paste('can.comp', 1:n.comp, sep = '')
#find X canonical variates
u = X %*% solution$alpha
#transform X coefficients back
alpha = solution$alpha
colnames(alpha) = paste('can.comp', 1:n.comp, sep = '')
if(lambda1 > 0){
alpha1 = alpha[1:n1.X, , drop=FALSE]
alpha2 = alpha[-(1:n1.X), , drop=FALSE]
if(!is.null(V.X)) alpha1 = V.X %*% alpha1
if(!is.null(B.X)) alpha2 = -B.X %*% alpha1 + alpha2
alpha = rbind(alpha1, alpha2)
alpha = alpha[permute.X, ]
}
#find Y canonical variates
v = Y %*% solution$beta
#transform Y coefficients back
beta = solution$ycoef
colnames(beta) = paste('can.comp', 1:n.comp, sep = '')
if(lambda2 > 0){
beta1 = beta[1:n1.Y, , drop=FALSE]
beta2 = beta[-(1:n1.Y), , drop=FALSE]
if(!is.null(V.Y)) beta1 = V.Y %*% beta1
if(!is.null(B.Y)) beta2 = -B.Y %*% beta1 + beta2
beta = rbind(beta1, beta2)
beta = beta[permute.Y, ]
}
#find correlation
rho = diag(cor(u,  v))
names(rho) = paste('can.comp', 1:n.comp, sep = '')
return(list('n.comp' = n.comp, 'cors' = rho, 'mod.cors' = rho.mod, 'x.coefs' = alpha, 'x.vars' = u, 'y.coefs' = beta, 'y.vars' = v))
}
setwd('RCCA')
devtools::document()
devtools::document()
?RCCA
devtools::document()
?RCCA
??RCCA
?RCCA
data(X)
data(Y)
rcca = RCCA(X, Y, lambda1 = 10, lambda2 = 0)
devtools::document()
?RCCA
devtools::document()
?RCCA
?pRCCA
data(X)
data(Y)
prcca = PRCCA(X, Y, lambda1 = 10, lambda2 = 0, index = 1:(ncol(X) - 10))
prcca = PRCCA(X, Y, lambda1 = 10, lambda2 = 0, index1 = 1:(ncol(X) - 10))
prcca = PRCCA(X, Y, lambda1 = 10, lambda2 = 0, index1 = 1:(ncol(X) - 10))
devtools::document()
?RCCA
?PRCCA
?RCCA
rcca = RCCA(X, Y, lambda1 = 10, lambda2 = 0)
plot(1:rcca$n.comp, rcca$mod.cors, pch = 16, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
#check the canonical correlations
points(1:rcca$n.comp, rcca$cors, pch = 16, col = 'purple')
#compare them to cor(x*alpha, y*beta)
points(1:rcca$n.comp, diag(cor(X %*% rcca$x.coefs, Y %*% rcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
#check the canonical coefficients for the first canonical variates
barplot(rcca$x.coefs[,'can.comp1'], col = 'orange', 'xlab' = 'X feature', ylab = 'value')
barplot(rcca$y.coefs[,'can.comp1'], col = 'darkgreen', 'xlab' = 'Y feature', ylab = 'value')
data(X)
data(Y)
#run RCCA
prcca = PRCCA(X, Y, lambda1 = 100, lambda2 = 0, index1 = 1:(ncol(X) - 10))
1:(ncol(X)-10)
prcca = PRCCA(X, Y, lambda1 = 100, lambda2 = 0, index1 = 1:(ncol(X) - 10), index = 1:2)
devtools::document()
prcca = PRCCA(X, Y, lambda1 = 100, lambda2 = 0, index1 = 1:(ncol(X) - 10))
?PRCCA
plot(1:prcca$n.comp, prcca$mod.cors, pch = 16, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
#
points(1:prcca$n.comp, prcca$cors, pch = 16, col = 'purple')
points(1:prcca$n.comp, diag(cor(X %*% prcca$x.coefs, Y %*% prcca$y.coefs)), col = 'cyan', pch = 16, cex = 0.7)
barplot(prcca$x.coefs[,'can.comp1'], col = 'orange', 'xlab' = 'X feature', ylab = 'value')
barplot(prcca$y.coefs[,'can.comp1'], col = 'darkgreen', 'xlab' = 'Y feature', ylab = 'value')
View(prcca)
View(prcca)
prcca$x.coefs
prcca$x.vars
??PRCCA
?PRCCA
devtools::document()
?GRCCA
??GRCCA
?GRCCA
?PRCCA
devtools::document()
?GRCCA
devtools::document()
?GRCCA
devtools::document()
?GRCCA
devtools::document()
?GRCCA
devtools::document()
?GRCCA
devtools::document()
?GRCCA
devtools::document()
?GRCCA
devtools::document()
?GRCCA
devtools::document()
?GRCCA
devtools::document()
?GRCCA
data(X)
data(Y)
n.groups = 5
#run GRCCA with no sparsity on a group level
group1 = rep(1:n.groups, rep(ncol(X)/n.groups, n.groups))
grcca = (X, Y, group1, group2 = NULL, lambda1 = 100, lambda2 = 0, mu1 = 0, mu2 = 0)
grcca = GRCCA(X, Y, group1, group2 = NULL, lambda1 = 100, lambda2 = 0, mu1 = 0, mu2 = 0)
devtools::document()
data(X)
data(Y)
#run RCCA
n.groups = 5
#run GRCCA with no sparsity on a group level
group1 = rep(1:n.groups, rep(ncol(X)/n.groups, n.groups))
grcca = GRCCA(X, Y, group1, group2 = NULL, lambda1 = 100, lambda2 = 0, mu1 = 0, mu2 = 0)
devtools::document()
group1 = rep(1:n.groups, rep(ncol(X)/n.groups, n.groups))
grcca = GRCCA(X, Y, group1, group2 = NULL, lambda1 = 100, lambda2 = 0, mu1 = 0, mu2 = 0)
#check the modified canonical correlations
plot(1:grcca$n.comp, grcca$mod.cors, pch = 16, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
#check the canonical coefficients for the first canonical variates
barplot(grcca$x.coefs[,'can.comp1'], col = 'orange', 'xlab' = 'X feature', ylab = 'value')
grcca = GRCCA(X, Y, group1, group2 = NULL, lambda1 = 1000, lambda2 = 0, mu1 = 0, mu2 = 0)
#check the modified canonical correlations
plot(1:grcca$n.comp, grcca$mod.cors, pch = 16, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
#check the canonical coefficients for the first canonical variates
barplot(grcca$x.coefs[,'can.comp1'], col = 'orange', 'xlab' = 'X feature', ylab = 'value')
n.groups = 50
#run GRCCA with sparsity on a group level
group1 = rep(1:n.groups, rep(ncol(X)/n.groups, n.groups))
grcca = (X, Y, group1, group2 = NULL, lambda1 = 100, lambda2 = 0, mu1 = 10, mu2 = 0)
grcca = GRCCAX, Y, group1, group2 = NULL, lambda1 = 100, lambda2 = 0, mu1 = 10, mu2 = 0)
grcca = GRCCA(X, Y, group1, group2 = NULL, lambda1 = 100, lambda2 = 0, mu1 = 10, mu2 = 0)
#check the modified canonical correlations
plot(1:grcca$n.comp, grcca$mod.cors, pch = 16, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
#check the canonical coefficients for the first canonical variates
barplot(grcca$x.coefs[,'can.comp1'], col = 'orange', 'xlab' = 'X feature', ylab = 'value')
grcca = GRCCA(X, Y, group1, group2 = NULL, lambda1 = 1000, lambda2 = 0, mu1 = 10, mu2 = 0)
#check the modified canonical correlations
plot(1:grcca$n.comp, grcca$mod.cors, pch = 16, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
#check the canonical coefficients for the first canonical variates
barplot(grcca$x.coefs[,'can.comp1'], col = 'orange', 'xlab' = 'X feature', ylab = 'value')
grcca = GRCCA(X, Y, group1, group2 = NULL, lambda1 = 1000, lambda2 = 0, mu1 = 100, mu2 = 0)
#check the modified canonical correlations
plot(1:grcca$n.comp, grcca$mod.cors, pch = 16, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
#check the canonical coefficients for the first canonical variates
barplot(grcca$x.coefs[,'can.comp1'], col = 'orange', 'xlab' = 'X feature', ylab = 'value')
grcca = GRCCA(X, Y, group1, group2 = NULL, lambda1 = 10000, lambda2 = 0, mu1 = 100, mu2 = 0)
#check the modified canonical correlations
plot(1:grcca$n.comp, grcca$mod.cors, pch = 16, xlab = 'component', 'ylab' = 'correlation', ylim = c(0, 1))
#check the canonical coefficients for the first canonical variates
barplot(grcca$x.coefs[,'can.comp1'], col = 'orange', 'xlab' = 'X feature', ylab = 'value')
?GRCCA
devtools::document()
